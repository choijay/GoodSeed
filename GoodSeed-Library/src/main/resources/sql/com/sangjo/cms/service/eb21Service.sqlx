<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="eb21">

	<insert id="insertEB21File">
		<!-- 
		<selectKey keyProperty="CMS_FILE_NO" resultType="String" order="BEFORE">
        	SELECT #{FILE_TYPE} || TO_CHAR(NOW(), 'MMDD')
       </selectKey>
        -->
        INSERT  /* [eb21Service.sqlx][eb21.inserteCMSFile][CMS 파일 등록] */
        INTO  "CMS_FILE"	
        (
			  "CMS_FILE_NO"
			, "PROCESS_DT"
			, "FILE_TYPE"
			, "FILE_NAME"
			, "FILE_PATH"
			, "APPLY_YN"
			, "REG_ID"
			, "REG_DTM"
        ) 
        VALUES
        ( 
        	#{CMS_FILE_NO}
			, #{PROCESS_DT}
			, #{FILE_TYPE}
			, #{CMS_FILE_NO}
			, #{FILE_PATH}
			, 0
			, #{g_userId}
			, NOW()
		)
	</insert>

	<insert id="insertEB21FileData">
        INSERT  /* [eb21Service.sqlx][eb21.inserteCMSData][CMS eb21 Data 등록] */
        INTO  "CMS_FILE_DATA"
        (
				  "CMS_FILE_NO"
				, "PROCESS_DT"
				, "SEQ"
				, "REQ_DT"
				, "PAYER_NO"
				, "BANK_CD"
				, "ACCOUNT_NO"
				, "ACCOUNT_BIRTH"
				, "MONTH_PAY_AMT"
				, "UNPAID_AMT"
				, "NEXT_TEMP_PAY_AMT"
				, "PAY_REQ_AMT"
				, "PAY_TYPE"
				, "CONT_NO"
				, "REG_ID"
				, "REG_DTM"
        ) VALUES (
	        	#{CMS_FILE_NO}
	        	, #{PROCESS_DT}
	        	, #{SEQ}
	        	, #{REQ_DT}
	        	, #{PAYER_NO}
	        	, #{BANK_CD}
				, #{ACCOUNT_NO}
				, SUBSTR(REPLACE(#{ACCOUNT_BIRTH},'-',''), 3, 8)
				, CAST(#{MONTH_PAY_AMT} AS INTEGER)
				, CAST(#{UNPAID_AMT} AS INTEGER)
				, CAST(#{NEXT_TEMP_PAY_AMT} AS INTEGER)
				, CAST(#{PAY_REQ_AMT} AS INTEGER)
				, '1'	/* ONLY 전액 출금 */
				, #{CONT_NO}
				, #{g_userId}
				, NOW()
        )
	</insert>

	<!-- 선택된 출금일자의 계약건 또는 이전 연체된 건을 출금의뢰  -->
	<select id="searchData" resultType="HMap">
		SELECT 	/* [eb21Service.sqlx][eb21.searchData][ CMS EB21 Data 조회] */
				A."CONT_NO", 
				A."PAYER_NO",
				B."CUST_NM",  
				A."REGULAR_PAY_DAY", 
				SUBSTR(REPLACE(#{PAY_REQ_DT}, '-', ''), 3, 8) AS "REQ_DT",
				CASE WHEN A."REGULAR_PAY_DAY" = CAST(#{REGULAR_PAY_DAY} AS SMALLINT) THEN A."MONTH_PAY_AMT" ELSE 0 END "MONTH_PAY_AMT", 
				CASE WHEN A."REGULAR_PAY_DAY" = CAST(#{REGULAR_PAY_DAY} AS SMALLINT) THEN 0 ELSE A."MONTH_PAY_AMT" END "UNPAID_AMT",
				A."NEXT_TEMP_PAY_AMT", 
				(A."MONTH_PAY_AMT" + A."NEXT_TEMP_PAY_AMT") AS "PAY_REQ_AMT",
				A."BANK_CD", 
				A."ACCOUNT_NO", 
				A."ACCOUNT_NM",
				A."ACCOUNT_BIRTH"
		FROM "CONTRACT" A, "CUSTOMER" B, 
		(
			<if test='INCLUDE_UNPAID_AMT != null and INCLUDE_UNPAID_AMT =="Y"'>
			SELECT B."PAYER_NO"
			FROM "CMS_FILE" A, "CMS_FILE_DATA" B
			WHERE A."FILE_TYPE" = 'EB21'
			AND A."APPLY_YN" = '1'
			AND A."PROCESS_DT" > SUBSTR(TO_CHAR(NOW() - interval '1 month', 'YYYYMMDD'), 1, 6) || LPAD(#{REGULAR_PAY_DAY}, 2, '0')
			AND A."CMS_FILE_NO" = B."CMS_FILE_NO"
			AND A."PROCESS_DT" = B."PROCESS_DT"
			AND B."RESULT_CD" = 'N'
			AND NOT EXISTS (SELECT '1'
				FROM "CMS_FILE_DATA" S
				WHERE S."PROCESS_DT" > SUBSTR(TO_CHAR(NOW() - interval '1 month', 'YYYYMMDD'), 1, 6) || LPAD(#{REGULAR_PAY_DAY}, 2, '0')
				AND S."RESULT_CD" = 'Y'
				AND S."PAYER_NO" = B."PAYER_NO")
			UNION
			</if>
			SELECT "PAYER_NO"
			FROM "CONTRACT" B
			WHERE "REGULAR_PAY_DAY" = CAST(#{REGULAR_PAY_DAY} AS SMALLINT)
			AND "PAY_START_DT" <![CDATA[ <= ]]> TO_CHAR(NOW(), 'YYYY-MM-DD')
			/*
			AND NOT EXISTS (
				SELECT '1'
				FROM "CMS_FILE_DATA" S
				WHERE S."PROCESS_DT" BETWEEN TO_CHAR(DATE_TRUNC('month', current_date),'YYYYMMDD') AND TO_CHAR(NOW(), 'YYYYMMDD')
				AND S."RESULT_CD" = 'Y'
				AND S."PAYER_NO" = B."PAYER_NO"
				)
			*/	
		) T
		WHERE A."CUST_NO" = B."CUST_NO"
		AND A."PAYER_NO" = T."PAYER_NO"
		AND A."PAY_STATUS_CD" IN ('02','03','04')
		AND A."CMS_APPROVE_STATUS_CD" = '02'
		ORDER BY 
			<if test="sidx == null">
				A."PAYER_NO" ASC
			</if>
			<if test='sidx != null and sidx !=""'>
				<if test="sidx == &quot;PAYER_NO&quot;">A."PAYER_NO"</if>
				<if test="sidx == &quot;CONT_NO&quot;">A."CONT_NO"</if>
				<if test="sord == &quot;asc&quot;">ASC</if>
				<if test="sord == &quot;desc&quot;">DESC</if>
		  	</if>
	</select>
	
	<select id="getSearchDataTotalInfo" resultType="HMap">
		SELECT 	/* [eb21Service.sqlx][eb21.getSearchDataTotalInfo][ CMS EB21 Data 건수조회] */
				COUNT(*) AS "TOTAL_COUNT", 
				COALESCE(SUM(CASE WHEN A."REGULAR_PAY_DAY" = CAST(#{REGULAR_PAY_DAY} AS SMALLINT) THEN A."MONTH_PAY_AMT" ELSE 0 END), 0) AS "TOT_MONTH_PAY_AMT", 
				COALESCE(SUM(CASE WHEN A."REGULAR_PAY_DAY" = CAST(#{REGULAR_PAY_DAY} AS SMALLINT) THEN 0 ELSE A."MONTH_PAY_AMT" END), 0) AS "TOT_UNPAID_AMT",
				COALESCE(SUM(A."NEXT_TEMP_PAY_AMT"), 0) AS "TOT_NEXT_TEMP_PAY_AMT", 
				SUM(A."MONTH_PAY_AMT" + A."NEXT_TEMP_PAY_AMT") AS "TOT_PAY_REQ_AMT"
		FROM "CONTRACT" A, "CUSTOMER" B, 
		(
			<if test='INCLUDE_UNPAID_AMT != null and INCLUDE_UNPAID_AMT =="Y"'>
			SELECT B."PAYER_NO"
			FROM "CMS_FILE" A, "CMS_FILE_DATA" B
			WHERE A."FILE_TYPE" = 'EB21'
			AND A."APPLY_YN" = '1'
			AND A."PROCESS_DT" > SUBSTR(TO_CHAR(NOW() - interval '1 month', 'YYYYMMDD'), 1, 6) || LPAD(#{REGULAR_PAY_DAY}, 2, '0')
			AND A."CMS_FILE_NO" = B."CMS_FILE_NO"
			AND A."PROCESS_DT" = B."PROCESS_DT"
			AND B."RESULT_CD" = 'N'
			AND NOT EXISTS (SELECT '1'
				FROM "CMS_FILE_DATA" S
				WHERE S."PROCESS_DT" > SUBSTR(TO_CHAR(NOW() - interval '1 month', 'YYYYMMDD'), 1, 6) || LPAD(#{REGULAR_PAY_DAY}, 2, '0')
				AND S."RESULT_CD" = 'Y'
				AND S."PAYER_NO" = B."PAYER_NO")
			UNION
			</if>
			SELECT "PAYER_NO"
			FROM "CONTRACT" B
			WHERE "REGULAR_PAY_DAY" = CAST(#{REGULAR_PAY_DAY} AS SMALLINT)
			AND "PAY_START_DT" <![CDATA[ <= ]]> TO_CHAR(NOW(), 'YYYY-MM-DD')
			/*
			AND NOT EXISTS (
				SELECT '1'
				FROM "CMS_FILE_DATA" S
				WHERE S."PROCESS_DT" BETWEEN TO_CHAR(DATE_TRUNC('month', current_date),'YYYYMMDD') AND TO_CHAR(NOW(), 'YYYYMMDD')
				AND S."RESULT_CD" = 'Y'
				AND S."PAYER_NO" = B."PAYER_NO"
				)
			*/
		) T
		WHERE A."CUST_NO" = B."CUST_NO"
		AND A."PAYER_NO" = T."PAYER_NO"
		AND A."PAY_STATUS_CD" IN ('02','03','04')
		AND A."CMS_APPROVE_STATUS_CD" = '02'
	</select>
	
		<!-- 
OR (A."DELAY_REQ_START_DT" != '' AND A."DELAY_REQ_START_DT" < TO_CHAR(NOW(), 'YYYY-MM-DD'))
OR (A."DELAY_REQ_END_DT" != '' AND A."DELAY_REQ_END_DT" < TO_CHAR(NOW(), 'YYYY-MM-DD'))
		 -->	
		 
	<select id="getExistTelegrams" resultType="int">
		SELECT COUNT(*)
		FROM "CMS_FILE"
		WHERE "PROCESS_DT" = #{PROCESS_DT}
		AND "FILE_TYPE" = 'EB21'
	</select>
	
	<!-- EB21 파일의 데이터 조회 (엑셀다운로드를 위한)-->
	<select id="getCMSFileDataForExcel" resultType="HMap">
		SELECT	/* [eb21Service.sqlx][eb21.getCMSFileDataForExcel][CMS 파일의 데이터 조회] */
			A."CMS_FILE_NO",
			A."FILE_TYPE",	
			B."SEQ",
			B."PAYER_NO",
			(SELECT X."COMM_CD_NM" FROM "SYS_CODE" X WHERE SUBSTR(B."BANK_CD", 1, 3) = X."COMM_CD" AND "COMM_CL_CD" = 'GS021') AS "BANK_NM", 
			B."ACCOUNT_NO",
			C."ACCOUNT_NM",
			SUBSTR(B."ACCOUNT_BIRTH", 1, 2) || '/' || SUBSTR(B."ACCOUNT_BIRTH", 3, 2) || '/' || SUBSTR(B."ACCOUNT_BIRTH", 5, 2) AS "ACCOUNT_BIRTH",
			B."RESULT_CD",
			(SELECT X."COMM_CD_NM" FROM "SYS_CODE" X WHERE B."ERROR_CD" = X."COMM_CD" AND "COMM_CL_CD" = 'GS032') AS "ERROR_NM",
			(SELECT X."COMM_CD_NM" FROM "SYS_CODE" X WHERE B."PAY_TYPE" = X."COMM_CD" AND "COMM_CL_CD" = 'GS033') AS "PAY_TYPE_NM",
			C."REGULAR_PAY_DAY",
			CASE WHEN D."CUST_NM" = C."CONT_NM" THEN D."CUST_NM" ELSE D."CUST_NM" || '(' || C."CONT_NM" || ')' END AS "CUST_NM",
			D."TEL",
			D."HP",
	   	  	<if test="FILE_TYPE != null and FILE_TYPE == 'EB21'">
			B."REQ_DT",
			B."CONT_NO",
			CAST(COALESCE(B."MONTH_PAY_AMT", 0) AS INTEGER) AS "MONTH_PAY_AMT",
			CAST(COALESCE(B."UNPAID_AMT", 0) AS INTEGER) AS "UNPAID_AMT",
			CAST(COALESCE(B."NEXT_TEMP_PAY_AMT", 0) AS INTEGER) AS "NEXT_TEMP_PAY_AMT",
			CAST(COALESCE(B."PAY_REQ_AMT", 0) AS INTEGER) AS "PAY_REQ_AMT"
			</if>
	   	  	<if test="FILE_TYPE != null and FILE_TYPE == 'EB22'">
			F."REQ_DT",
	   	  	F."CONT_NO",
			CAST(COALESCE(F."MONTH_PAY_AMT", 0) AS INTEGER) AS "MONTH_PAY_AMT",
			CAST(COALESCE(F."UNPAID_AMT", 0) AS INTEGER) AS "UNPAID_AMT",
			CAST(COALESCE(F."NEXT_TEMP_PAY_AMT", 0) AS INTEGER) AS "NEXT_TEMP_PAY_AMT",
			CAST(COALESCE(F."PAY_REQ_AMT", 0) AS INTEGER) AS "PAY_REQ_AMT"
			</if>
	   	  FROM	"CMS_FILE" A
	   	  		JOIN "CMS_FILE_DATA" B ON A."CMS_FILE_NO" = B."CMS_FILE_NO" AND A."PROCESS_DT" = B."PROCESS_DT"
	   	  		<if test="FILE_TYPE != null and FILE_TYPE == 'EB21'">
	   	  		LEFT OUTER JOIN "CONTRACT" C ON B."PAYER_NO" = C."PAYER_NO"
	   	  		</if>
		   	  	<if test="FILE_TYPE != null and FILE_TYPE == 'EB22'">
	   	  		JOIN "CMS_FILE_DATA" F ON F."CMS_FILE_NO" = REPLACE(#{CMS_FILE_NO},'EB22','EB21') AND F."PROCESS_DT" = B."PROCESS_DT" AND F."PAYER_NO" = B."PAYER_NO"
	   	  		LEFT OUTER JOIN "CONTRACT" C ON F."PAYER_NO" = C."PAYER_NO"
	   	  		</if>
	   	  		LEFT OUTER JOIN "CUSTOMER" D ON C."CUST_NO" = D."CUST_NO"
		 WHERE 	A."CMS_FILE_NO" = #{CMS_FILE_NO}
		 AND A."PROCESS_DT" = REPLACE(#{PROCESS_DT}, '-', '')
		 ORDER BY
			<if test="sidx == null">
				B."SEQ" ASC
			</if>
			<if test='sidx != null and sidx !=""'>
				<if test="sidx == &quot;PAYER_NO&quot;">B."PAYER_NO"</if>
				<if test="sidx == &quot;CONT_NO&quot;">C."CONT_NO"</if>
				<if test="sord == &quot;asc&quot;">ASC</if>
				<if test="sord == &quot;desc&quot;">DESC</if>
		  	</if>
    </select>
</mapper>